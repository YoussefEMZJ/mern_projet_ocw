name: Build and Push Docker Images

on:
  push:
    branches:
      - develop
    paths-ignore: 
      - 'version.txt'  # Ignore les pushs modifiant seulement ce fichier
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_PAT }}  # Utilise le PAT pour bypass la protection

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Pull latest changes from Feature/BTP
      run: |
        git checkout develop
        git pull origin develop  # Assurer que la branche est à jour avec les modifications distantes
        

    - name: Read current version
      id: read_version
      run: |
        VERSION=$(cat version.txt)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Increment version and commit the changes
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      id: increment_version
      run: |
        git config --global user.name "GitHub Actions"  # Configurer le nom
        git config --global user.email "actions@github.com"  # Configurer l'email
        git checkout develop
        

        #Lire et afficher la version actuelle
        VERSION=${{ env.VERSION }}
        echo "Current version is: $VERSION"

        #Incrémentation de la version
        MAJOR=$(echo "$VERSION" | cut -d '.' -f 1)
        MINOR=$(echo "$VERSION" | cut -d '.' -f 2)
        PATCH=$(echo "$VERSION" | cut -d '.' -f 3)
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        echo "New version will be: $NEW_VERSION"
        
        echo "$NEW_VERSION" > version.txt
        cat version.txt
        echo "IMAGE_TAG=$NEW_VERSION" >> $GITHUB_ENV
        git add version.txt  # Ajouter le fichier modifié
        git commit -m "Incremented to version ${{ env.IMAGE_TAG }}"  # Commiter les modifications
        git push origin develop  # Pousser la nouvelle branche

    - name: Build and Tag Client Docker Image
      run: |
        docker build -t youssefemzj/mern_projet_ocw_client:${{ env.IMAGE_TAG }} ./client
        docker tag youssefemzj/mern_projet_ocw_client:${{ env.IMAGE_TAG }} youssefemzj/mern_projet_ocw_client:latest

    - name: Build and Tag Server Docker Image
      run: |
        docker build -t youssefemzj/mern_projet_ocw_server:${{ env.IMAGE_TAG }} ./server
        docker tag youssefemzj/mern_projet_ocw_server:${{ env.IMAGE_TAG }} youssefemzj/mern_projet_ocw_server:latest

    - name: Push Client Docker Image to DockerHub
      run: |
        docker push youssefemzj/mern_projet_ocw_client:${{ env.IMAGE_TAG }}
        docker push youssefemzj/mern_projet_ocw_client:latest

    - name: Push Server Docker Image to DockerHub
      run: |
        docker push youssefemzj/mern_projet_ocw_server:${{ env.IMAGE_TAG }}
        docker push youssefemzj/mern_projet_ocw_server:latest

 trigger-deploy:
    needs: build  # Assurez-vous que le job build est terminé
    runs-on: ubuntu-latest
    steps:
    - name: Trigger deploy workflow
      run: |
        curl -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
        https://api.github.com/repos/YoussefEMZJ/mern_projet_ocw/actions/workflows/deploy.yml/dispatches \
        -d '{"ref":"develop"}'
